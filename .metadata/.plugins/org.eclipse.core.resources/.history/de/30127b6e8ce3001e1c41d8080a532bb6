package io.spring.rabbitmq.rmqproductservice;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.backoff.ExponentialBackOffPolicy;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.util.backoff.ExponentialBackOff;

@Configuration
public class ProductUpdatesMessageConfig {

	public final static String INVENTORY_QUEUE = "inventory.updates.queue";
	public final static String INVENTORY_EXCHANGE = "inventory.events.exchange";
	public final static String INVENTORY_ROUTING_KEY = "product.created";

	@Bean
	public Queue queue() {
		return new Queue(INVENTORY_QUEUE, true);
	}

	@Bean
	public TopicExchange topicExchange() {
		return new TopicExchange(INVENTORY_EXCHANGE);
	}

	@Bean
	Binding binding(Queue queue, TopicExchange exchange) {
		return BindingBuilder.bind(queue).to(exchange).with(INVENTORY_ROUTING_KEY);
	}

	@Bean
	AmqpTemplate amqpTemplate(ConnectionFactory conncetionFactory) {
		RabbitTemplate rabbitTemplate = new RabbitTemplate();
		
		RetryTemplate retryTemplate = new RetryTemplate();
		ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();
		
		backOffPolicy.setInitialInterval(500);
		backOffPolicy.setMultiplier(10);
		backOffPolicy.setMaxInterval(10000);
		
		
		return rabbitTemplate;
	}

}
