package io.spring.rabbitmq.rmqproductservice;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.backoff.ExponentialBackOffPolicy;
import org.springframework.retry.support.RetryTemplate;



@Configuration
public class ProductUpdatesMessageConfig {

	public final static String INVENTORY_QUEUE = "inventory.updates.queue";
	public final static String INVENTORY_EXCHANGE = "inventory.events.exchange";
	public final static String INVENTORY_ROUTING_KEY = "product.created";

	@Bean
	public Queue queue() {
		return new Queue(INVENTORY_QUEUE, true);
	}

	@Bean
	public TopicExchange topicExchange() {
		return new TopicExchange(INVENTORY_EXCHANGE);
	}

	@Bean
	public Binding binding(Queue queue, TopicExchange exchange) {
		return BindingBuilder.bind(queue).to(exchange).with(INVENTORY_ROUTING_KEY);
	}
	
	@Bean
	public MessageConverter messageConverter() {
		return new Jackson2JsonMessageConverter();
	}
	

//	@Bean
//	public ConnectionFactory connectionFactory() {
//	    ConnectionFactory connectionFactory = new ConnectionFactory();
//	    connectionFactory.setHost("localhost");
//	    connectionFactory.setPort(5672);
//	    connectionFactory.setUsername("guest");
//	    connectionFactory.setPassword("guest"); 
//	    return connectionFactory;
//	}

	@Bean
	public AmqpTemplate amqpTemplate(ConnectionFactory conncetionFactory) {
		RabbitTemplate rabbitTemplate = new RabbitTemplate();
		
		RetryTemplate retryTemplate = new RetryTemplate();
		ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();
		
		backOffPolicy.setInitialInterval(500);
		backOffPolicy.setMultiplier(10);
		backOffPolicy.setMaxInterval(10000);
		
		retryTemplate.setBackOffPolicy(backOffPolicy);
		rabbitTemplate.setRetryTemplate(retryTemplate);
		rabbitTemplate.setMessageConverter(messageConverter());
		
		return rabbitTemplate;
	}

}
