package io.spring.rabbitmq.rmqinventoryservice;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MessageConfig {

	public final static String INVENTORY_QUEUE = "inventory.updates.queue";
	public final static String INVENTORY_EXCHANGE = "inventory.events.exchange";
	public final static String INVENTORY_ROUTING_KEY = "product.created";

	@Bean
	public Queue queue() {
		return new Queue(INVENTORY_QUEUE, true);
	}

	@Bean
	public TopicExchange exchange() {
		return new TopicExchange(INVENTORY_EXCHANGE);
	}

	@Bean
	public Binding binding(Queue queue, TopicExchange exchange) {
		return BindingBuilder.bind(queue).to(exchange).with(INVENTORY_ROUTING_KEY);
	}

	@Bean
	SimpleMessageListenerContainer container(ConnectionFactory connectionFactory,
			MessageListenerAdapter listenerAdapter) {
		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
		container.setConnectionFactory(connectionFactory);
		container.setQueueNames(INVENTORY_QUEUE);
		container.setMessageListener(listenerAdapter);
		return container;
	}
	
	 @Bean
	  MessageListenerAdapter listenerAdapter(InventoryService inventoryService) {
	    return new MessageListenerAdapter(inventoryService, "handleReceivingMessage");
	  }

}


