package io.spring.rabbitmq.rmqinventoryservice.messageconfig;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.backoff.ExponentialBackOffPolicy;
import org.springframework.retry.support.RetryTemplate;


@Configuration
public class InventoryResponseMessageConfig {
	
    public static final String INVENTORY_RESPONSES_QUEUE = "order.confirmation.queue";
    public static final String INVENTORY_RESPONSES_EXCHANGE = "inventory.responses.exchange";
    public static final String INVENTORY_RESPONSES_ROUTING_KEY = "order.confirmed";
	
	@Bean
    public Queue inventoryResponsesQueue() {
        return new Queue(INVENTORY_RESPONSES_QUEUE, true); 
    }

    @Bean
    public DirectExchange inventoryResponsesExchange() {
        return new DirectExchange(INVENTORY_RESPONSES_EXCHANGE);
    }

    @Bean
    public Binding inventoryResponsesBinding(Queue inventoryResponsesQueue, DirectExchange inventoryResponsesExchange) {
        return BindingBuilder.bind(inventoryResponsesQueue).to(inventoryResponsesExchange).with("inventory.responses");
    }
    
    @Bean
	public MessageConverter messageConverter() {
		return new Jackson2JsonMessageConverter();
	}
	

	@Bean
	public ConnectionFactory connectionFactory() {
	    CachingConnectionFactory connectionFactory = new CachingConnectionFactory();
	    connectionFactory.setHost("localhost");
	    connectionFactory.setPort(5672);
	    connectionFactory.setUsername("guest");
	    connectionFactory.setPassword("guest"); 
	    return connectionFactory;
	}

	@Bean
	public AmqpTemplate amqpTemplate(ConnectionFactory connectionFactory) {
		RabbitTemplate rabbitTemplate = new RabbitTemplate();
		rabbitTemplate.setConnectionFactory(connectionFactory);
		
		RetryTemplate retryTemplate = new RetryTemplate();
		ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();
		
		backOffPolicy.setInitialInterval(500);
		backOffPolicy.setMultiplier(10);
		backOffPolicy.setMaxInterval(10000);
		
		retryTemplate.setBackOffPolicy(backOffPolicy);
		rabbitTemplate.setRetryTemplate(retryTemplate);
		rabbitTemplate.setMessageConverter(messageConverter());
		
		return rabbitTemplate;
	}
}
